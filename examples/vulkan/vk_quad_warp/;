use nalgebra_glm::{Mat2x4, Mat3x3};
use nalgebra::{MatrixMN, U8, U9};

pub fn find_homography(src: [[f32; 4]; 2], dst: [[f32; 4]; 2]) -> Mat3x3 {
    let a: [f32; 72] =[
        -src[0][0], -src[0][1], -1.0,   0.0,   0.0,  0.0, src[0][0]*dst[0][0], src[0][1]*dst[0][0], -dst[0][0], // h11
        0.0,   0.0,  0.0, -src[0][0], -src[0][1], -1.0, src[0][0]*dst[0][1], src[0][1]*dst[0][1], -dst[0][1], // h12

        -src[1][0], -src[1][1], -1.0,   0.0,   0.0,  0.0, src[1][0]*dst[1][0], src[1][1]*dst[1][0], -dst[1][0], // h13
        0.0,   0.0,  0.0, -src[1][0], -src[1][1], -1.0, src[1][0]*dst[1][1], src[1][1]*dst[1][1], -dst[1][1], // h21

        -src[2][0], -src[2][1], -1.0,   0.0,   0.0,  0.0, src[2][0]*dst[2][0], src[2][1]*dst[2][0], -dst[2][0], // h22
        0.0,   0.0,  0.0, -src[2][0], -src[2][1], -1.0, src[2][0]*dst[2][1], src[2][1]*dst[2][1], -dst[2][1], // h23

        -src[3][0], -src[3][1], -1.0,   0.0,   0.0,  0.0, src[3][0]*dst[3][0], src[3][1]*dst[3][0], -dst[3][0], // h31
        0.0,   0.0,  0.0, -src[3][0], -src[3][1], -1.0, src[3][0]*dst[3][1], src[3][1]*dst[3][1], -dst[3][1] // h32
    ];
    let a: MatrixMN<f32, U8, U9> = MatrixMN::from_column_slice_generic(U8, U9, &a[..]);
    unimplemented!()
}
